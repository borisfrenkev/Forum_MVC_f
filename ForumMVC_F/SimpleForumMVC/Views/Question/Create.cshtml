@model SimpleForumMVC.Models.QuestionSubmitModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset class="form-horizontal">
        <legend>Question</legend>

        <div class="control-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title, null, new { @class = "help-inline" })
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(model => model.Content, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(model => model.Content)
                @Html.ValidationMessageFor(model => model.Content, null, new { @class = "help-inline" })
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(model => model.CategoryId, "Category", new { @class = "control-label" })
            <div class="controls">
                @Html.DropDownListFor(model => model.CategoryId, ViewBag.CategoryList as SelectList, "Select Category")
                @Html.ValidationMessageFor(model => model.CategoryId, null, new { @class = "help-inline" })
            </div>
        </div>

        <div class="control-group">
            @Html.LabelFor(model => model.Tags, "Tags", new { @class = "control-label" })
                <div class="controls">
                    @Html.EditorFor(Model => Model.Tags)
                </div>
        </div>



    
        <div class="form-actions no-color">
            <input type="submit" value="Create" class="btn" />
        </div>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "List")
</div>


@section Scripts {
    <script src="~/Scripts/jquery-ui-1.10.3.js"></script>
    
   <script>
    
       $(function () {
           function split(val) {
               return val.split(/\s+/);
           }
           function extractLast(term) {
               return split(term).pop();
           }
           var availableTags = [];

           $.ajax({
               type:"get",
               url: "@Url.Action("LookupTags", "Question")",
               dataType: "json",
               success: function (data) {
                   $(data).each(function (index, element) {
                       availableTags.push(element.value);
                   });
                  
                   $("#Tags").autocomplete({
                       minLength: 0,
                       source: function (request, response) {
                           // delegate back to autocomplete, but extract the last term
                           response($.ui.autocomplete.filter(
                                   availableTags, extractLast(request.term)));
                       },
                       focus: function () {
                           // prevent value inserted on focus
                           return false;
                       },
                       select: function (event, ui) {
                           var terms = split(this.value);
                           // remove the current input
                           terms.pop();
                           // add the selected item
                           terms.push(ui.item.value);
                           // add placeholder to get the comma-and-space at the end
                           terms.push("");
                           this.value = terms.join(" ");
                           return false;
                       }
                   });
                  
               }
           });
       });
    </script>
}

